{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleChange","e","setState","searchStr","target","value","lastSelected","handleKeyUp","key","state","undefined","selectedList","length","removeItem","list","counter","bind","i","itm","this","slice","indexOf","push","splice","style","padding","class","map","person","data","onClick","isSelected","isLast","float","type","onKeyUp","onChange","startsWith","handleClick","React","Component","Header","ListRow","props","name","toString","toLowerCase","Chip","border","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28e3584e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n     super();\r\n     this.state = {\r\n        list:\r\n        [\r\n           {\r\n              \"name\":\"John\"\r\n           },\r\n           {\r\n              \"name\":\"Lillian\"\r\n           },\r\n           {\r\n              \"name\":\"Alice\"            \r\n           },\r\n           {\r\n              \"name\":\"Matthew\"            \r\n           },\r\n           {\r\n              \"name\":\"Mark\"            \r\n           }\r\n        ],\r\n        selectedList:[],\r\n        searchStr:\"\",\r\n        lastSelected:0,\r\n        counter:0\r\n     }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleKeyUp = this.handleKeyUp.bind(this);\r\n\r\n  }\r\n\r\n  handleClick(i, itm) {\r\n    var selectedList = this.state.selectedList.slice();\r\n    var list = this.state.list.slice();\r\n    if (selectedList.indexOf(itm)<0){\r\n      selectedList.push(itm);\r\n      list.splice(i,1);\r\n    }\r\n\r\n    this.setState({list: list});\r\n    this.setState({selectedList: selectedList});\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({searchStr: e.target.value});\r\n    this.setState({lastSelected:0});\r\n  }\r\n\r\n  handleKeyUp = (e) => {\r\n    if (e.key === \"Backspace\") {\r\n      if (this.state.lastSelected===1){\r\n        if (this.state.selectedList!==undefined && this.state.selectedList.length>0)\r\n          this.removeItem(this.state.selectedList.length-1, this.state.selectedList[this.state.selectedList.length-1]);\r\n        this.setState({lastSelected:0});\r\n      } else {\r\n        if (!this.state.searchStr)\r\n          this.setState({lastSelected:this.state.lastSelected+1});\r\n      } \r\n    }    \r\n  }\r\n\r\n  removeItem(i,itm){\r\n    var selectedList = this.state.selectedList.slice();\r\n    var list = this.state.list.slice();\r\n    selectedList.splice(i,1);\r\n    list.push(itm);\r\n    this.setState({list: list});\r\n    this.setState({selectedList: selectedList});\r\n  }\r\n\r\n  render() {\r\n     return (\r\n        <div style={{padding:\"10px\"}}>\r\n          <Header/>\r\n          <ul class=\"selectedItems\">\r\n          {this.state.selectedList.map((person, i) => <Chip data = {person} onClick={() => this.removeItem(i, person)} isSelected={this.state.lastSelected} isLast={(i===this.state.selectedList.length-1)? true:false} />)}\r\n          </ul>          \r\n          <div style={{float:\"left\"}}>\r\n            <input type=\"text\" class=\"search\" value={this.state.searchStr} onKeyUp={this.handleKeyUp} onChange={this.handleChange} />\r\n            <ul class=\"filterList\">\r\n              {this.state.list.map((person, i) => <ListRow startsWith={this.state.searchStr} key={i} data = {person} onClick={() => this.handleClick(i, person)} />)}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n     );\r\n  }\r\n}\r\nclass Header extends React.Component {\r\n  render() {\r\n     return (\r\n        <div>\r\n           <h1>Chip Search</h1>\r\n        </div>\r\n     );\r\n  }\r\n}\r\nclass ListRow extends React.Component {\r\n  render() {\r\n    if (this.props.data.name.toString().toLowerCase().indexOf(this.props.startsWith.toString().toLowerCase())===0) {\r\n      return (\r\n        <li onClick={() => this.props.onClick()}>{this.props.data.name}</li>          \r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nclass Chip extends React.Component {\r\n  render() {\r\n    if (!this.props.isLast) {\r\n     return (\r\n       <li><button class=\"remove\" onClick={() => this.props.onClick()}>x</button> {this.props.data.name}</li>          \r\n     );\r\n    } else if (this.props.isLast && this.props.isSelected===1){\r\n      return (\r\n        <li style={{border:\"1px solid green\"}}><button class=\"remove\" onClick={() => this.props.onClick()}>x</button> {this.props.data.name}</li>          \r\n      );\r\n    } else {\r\n      return (\r\n        <li><button class=\"remove\" onClick={() => this.props.onClick()}>x</button> {this.props.data.name}</li>          \r\n      );\r\n    }\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}