{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleChange","e","setState","searchStr","target","value","state","length","lastSelected","handleKeyUp","key","undefined","selectedList","removeItem","list","counter","bind","i","itm","this","slice","indexOf","push","splice","style","padding","class","map","person","data","onClick","float","type","onKeyUp","onChange","startsWith","handleClick","React","Component","Header","ListRow","props","name","toString","toLowerCase","Chip","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fb743ef.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n     super();\n     this.state = {\n        list:\n        [\n           {\n              \"name\":\"John\"\n           },\n           {\n              \"name\":\"Lillian\"\n           },\n           {\n              \"name\":\"Alice\"            \n           },\n           {\n              \"name\":\"Matthew\"            \n           },\n           {\n              \"name\":\"Mark\"            \n           }\n        ],\n        selectedList:[],\n        searchStr:\"\",\n        lastSelected:false,\n        counter:0\n     }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n\n  }\n\n  handleClick(i, itm) {\n    var selectedList = this.state.selectedList.slice();\n    var list = this.state.list.slice();\n    if (selectedList.indexOf(itm)<0){\n      selectedList.push(itm);\n      list.splice(i,1);\n    }\n\n    this.setState({list: list});\n    this.setState({selectedList: selectedList});\n  }\n\n  handleChange = (e) => {\n    this.setState({searchStr: e.target.value});\n    if (this.state.searchStr.length===0){\n      this.setState({lastSelected:false});\n    }\n  }\n\n  handleKeyUp = (e) => {\n    if (e.key === \"Backspace\") {\n      if (this.state.lastSelected===false){\n        this.setState({lastSelected:true});\n      } else {\n        if (this.state.selectedList!==undefined && this.state.selectedList.length>0)\n          this.removeItem(this.state.selectedList.length-1, this.state.selectedList[this.state.selectedList.length-1]);\n      }\n    }    \n  }\n\n  removeItem(i,itm){\n    var selectedList = this.state.selectedList.slice();\n    var list = this.state.list.slice();\n    selectedList.splice(i,1);\n    list.push(itm);\n    this.setState({list: list});\n    this.setState({selectedList: selectedList});\n  }\n\n  render() {\n     return (\n        <div style={{padding:\"10px\"}}>\n          <Header/>\n          <ul class=\"selectedItems\">\n          {this.state.selectedList.map((person, i) => <Chip data = {person} onClick={() => this.removeItem(i, person)} />)}\n          </ul>          \n          <div style={{float:\"left\"}}>\n            <input type=\"text\" class=\"search\" value={this.state.searchStr} onKeyUp={this.handleKeyUp} onChange={this.handleChange} />\n            <ul class=\"filterList\">\n              {this.state.list.map((person, i) => <ListRow startsWith={this.state.searchStr} key={i} data = {person} onClick={() => this.handleClick(i, person)} />)}\n            </ul>\n          </div>\n        </div>\n     );\n  }\n}\nclass Header extends React.Component {\n  render() {\n     return (\n        <div>\n           <h1>Chip Search</h1>\n        </div>\n     );\n  }\n}\nclass ListRow extends React.Component {\n  render() {\n    if (this.props.data.name.toString().toLowerCase().indexOf(this.props.startsWith.toString().toLowerCase())===0) {\n      return (\n        <li onClick={() => this.props.onClick()}>{this.props.data.name}</li>          \n      );\n    } else {\n      return null;\n    }\n  }\n}\nclass Chip extends React.Component {\n  render() {\n     return (\n       <li><button class=\"remove\" onClick={() => this.props.onClick()}>x</button> {this.props.data.name}</li>          \n     );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}